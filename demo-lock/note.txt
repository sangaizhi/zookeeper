一、分布式锁？
分布式锁主要是用于在分布式环境中保护跨进程，跨主机，扩网络的的共享资源实现互斥访问，已达到保证数据的一致性。

二、zookeeper的结构？
在使用zookeeper实现分布式锁之前，需要了解zookeeper的架构
zookeeper中，存在znode,
znode?
znode 是一个跟unix 文件系统路径相似的节点，可以往这个节点存储或获取数据。
图例：见 zoopeeper 节点机构图.png
左边的整个区域表示一个Zookeeper集群，locker是Zookeeper的一个持久节点，node_1、node_2、node_3是locker这个持久节点下面的临时顺序节点。client_1、client_2、client_n表示多个客户端，Service表示需要互斥访问的共享资源


三、分布式获取锁的思路？
分布式获取锁主要是依靠zookeeper的临时顺序节点实现的。
总体思路：
在获取分布式锁的时候，先在 locker 节点下创建临时顺序节点，如果当前客户端创建临时顺序节点是所有locker下子节点中最小的，那么表示当前客户端获取到了锁。那怎么保证当前客户端获取锁呢？具体流程如下：
客户端需要获取锁时，就在 locker 节点下创建一个临时顺序节点表示要获取的锁，释放锁时删除该临时顺序节点。
创建临时顺序节点后，首先条用 getChildren(“locker”) 获取 locker 下面的所有节点(从小到大排序)，此时不需要设置任何watcher（如果创建watcher,就需要创建监控所有子节点的watcher,比较浪费资源）。
此时如果客户端发现自己创建的临时顺序节点在所有节点中是最小的，那么表示当前客户端获取到了锁。如果发现自己创建的节点不是最小的，说明还没有获取到锁，此时客户端就需要找到比自己创建的节点次小（比自己小的中的第一个）的节点。
然后对这个调用exist()方法(多任务下说不定什么时候这个节点就被删除了)，同时对这个次小的节点注册时间监听器。
之后如果这个被客户端关注的节点被删除，那么客户端就会收到相应通知。
此时，客户端需要再去判断自己的节点是不是最小的。
如果是，就获得到锁；如果不是，则重复以上步骤；监听次小的节点。
算法流程：见 zookeeper  分布式锁获取锁流程图.jpg

 解释：客户端A要获取分布式锁的时候首先到locker下创建一个临时顺序节点（node_n），然后立即获取locker下的所有（一级）子节点。
此时因为会有多个客户端同一时间争取锁，因此locker下的子节点数量就会大于1。对于顺序节点，特点是节点名称后面自动有一个数字编号，
先创建的节点数字编号小于后创建的，因此可以将子节点按照节点名称后缀的数字顺序从小到大排序，这样排在第一位的就是最先创建的顺序节点，
此时它就代表了最先争取到锁的客户端！此时判断最小的这个节点是否为客户端A之前创建出来的node_n，如果是则表示客户端A获取到了锁，
如果不是则表示锁已经被其它客户端获取，因此客户端A要等待它释放锁，也就是等待获取到锁的那个客户端B把自己创建的那个节点删除。
此时就通过监听比node_n次小的那个顺序节点的删除事件来知道客户端B是否已经释放了锁，如果是，此时客户端A再次获取locker下的所有子节点，
再次与自己创建的node_n节点对比，直到自己创建的node_n是locker的所有子节点中顺序号最小的，此时表示客户端A获取到了锁！



