一、 Zookeeper 集群使用场景
    1、监控集群机器
        1)、监控系统实时检测集群机器是否存活，通常的做法是：监控系统通过某种手段定时检测每一个机器，或者每个机器定时向监控系
            统汇报“我还活着”。
            缺点：
                扩展性差，集群中的机器有变化时，需要修改的东西较多；
                存在延时；
        2)、利用 Zookeeper 实现检测集群机器状态
            实现原理：
                A: 每一个机器在指定节点 X 下创建 EPHEMERAL 类型的节点，一旦客户端和服务端的会话结束或过期，那么该节点就会消失。
                B: 每一个集群机器在指定节点 X 上注册一个 Watcher，那么如果 X 的子节点变化了，会通知注册了 Watcher 的机器。

    2、Master 选举
        利用 Zookeeper 的两个特性，就可以实现 Master 选举
        1)、利用 Zookeeper 的强一致性，能够保证在分布式高并发的情况下创建全局唯一性的节点。利用这个特性，就能在分布式环境
            中进行集群选举了。
        2)、利用 EPHEMERAL_SEQUENTIAL（临时顺序）类型节点的特性，这样每一个节点会自动被编号，允许所有请求都能够创建成功，
            但是有个创建顺序，每次选取序列号最小的那个机器作为 Master.
二、应用举例：
    1、集群机器监控
       如果有多台机器提供服务并且组成服务集群，那么我们必须需要一个管家知道当前服务集群中任何一个机器服务的状态，一旦有一个机器
       发生故障导致不能提供服务，那么这个集群中的其他机器必须知道，从而调整集群服务的策略。任何机器加入集群也是一样。
       Zookeeper 提供集群服务的大致结构图参考 集群服务结构1.png
       具体原理:
           在 Zookeeper 服务端注册一个 znode  叫做 servers,此后集群中的每一个机器启动的时候都需要在这个节点下创建一个
           对应的 EPHEMERAL 节点，并且每一个集群机器都会去 watch /servers 这个父节点；那么这个父节点下的数据或者子节点
           变化都会通知对父节点进行 watch 的客户端（集群机器），这主要是依赖于 EPHEMERAL 节点的特性。
    2、Master 选举
       Master 选举有很多应用示例。比如集群中大多数机器都需要执行同一个比较耗时的操作，如果这些机器都去执行，会比较浪费资源；
       此时，我们就可以采用另一种方案：让这些机器的某一台机器去执行这个耗时的操作，待执行完后，在把执行结果同步到其他机器中；
       那么此时问题是就是该让哪一台机器（客户端）去执行这个操作呢？这个时候我们就可以使用 Master 选举了，选出的 Master 去执行这个操作。
       选举 Master 的过程类似于 Zookeeper 利用临时顺序节点实现共享锁的过程，不同的是这里当所有客户端创建完属于自己的那个
       EPHEMERAL_SEQUENTIAL 节点后，节点编号最小的那个节点的创建者（机器或者客户端）就是此次选举出来的 Master。

